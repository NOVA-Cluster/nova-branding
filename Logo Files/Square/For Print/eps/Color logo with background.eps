%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2476 2280
%%HiResBoundingBox: 0 0 2475.1199 2279.04
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2475.1199 2279.04 re
W
q
[0.24 0 0 -0.24 0 2279.04] cm
q
0 0 10312.5 9493.75 re
W*
q
[3.124999 0 0 3.124902 0.00207178 0] cm
/DeviceRGB {} CS
[0.3216 0.0706 0.3843] SC
/DeviceRGB {} cs
[0.3216 0.0706 0.3843] sc
0 0 3300 3038.095 re
f
Q
q
[18.336729 0 0 18.336163 1600.95496 -732.97974] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
97.525002 109.331001 m
100.499001 106.035004 l
107.247002 99.228004 107.650002 98.821007 112.324997 94.901001 c
114.955994 92.836998 118.494995 90.123001 121.212997 88.171997 c
139.164001 75.792 164.177002 66.983002 188.82999 65.697998 c
192.52699 65.505997 196.08598 65.488998 199.49098 65.634995 c
200.44098 65.680992 l
209.26598 66.369995 209.79498 66.410995 215.15398 67.294991 c
224.61798 69.182991 225.18198 69.292992 230.80898 70.968994 c
220.84398 67.962997 208.70598 66.607994 194.94197 67.324997 c
156.393997 69.334999 117.094002 86.968002 97.525002 109.331001 c
f
69.500999 163.723999 m
71.522003 156.281006 l
72.851006 152.432999 74.622002 147.295013 76.152 143.52301 c
76.826004 141.963013 l
91.967003 107.615013 148.778015 77.562012 204.285 74.670013 c
230.429 73.308014 251.649 78.212013 265.32901 87.361015 c
271.91302 92.107018 l
275.34702 94.958015 279.89203 98.805016 283.15302 101.85202 c
269.246 88.400002 243.377 80.767998 210.153 82.5 c
149.768997 85.647003 87.957001 118.537994 72.091003 155.962006 c
70.973 158.602005 70.112999 161.188995 69.500999 163.723999 c
f
68.890999 220.21001 m
68.077995 215.55 67.040001 209.32101 66.515999 204.62001 c
66.097 197.97301 l
65.873001 191.77101 67.154999 185.14601 70.094002 178.21301 c
87.164001 137.947021 153.667999 102.560013 218.63699 99.173012 c
261.23898 96.95401 292.60199 109.046013 304.332 128.986008 c
310.38101 140.390015 310.87299 141.322006 313.90799 149.403015 c
305.10699 125.485016 271.25598 110.427017 223.629 112.90802 c
157.377991 116.360023 89.559998 152.447021 72.153 193.50902 c
68.094002 203.082 67.135002 212.08099 68.890999 220.21001 c
f
92.813004 271.62601 m
85.449005 261.32501 84.848007 260.483 80.832001 253.04001 c
75.355003 242.77802 74.910004 230.561 80.57 217.214 c
97.751999 176.68301 164.695007 141.059998 230.09201 137.654007 c
283.276 134.882004 319.05902 154.267014 321.32602 183.40401 c
321.46301 186.90601 321.72803 191.57201 321.70502 195.07401 c
321.535 198.26601 321.41803 202.52901 321.11301 205.711 c
324.27701 173.923 288.48801 151.981003 233.203 154.860992 c
170.13 158.146988 105.564003 192.50299 88.992996 231.59399 c
82.488998 246.935 84.344002 260.728 92.813004 271.62601 c
f
138.141006 308.33899 m
136.869003 307.71399 l
127.371002 302.56799 125.661003 301.64099 117.75 296.00198 c
103.354996 285.37799 98.248001 269.72498 105.885002 251.70999 c
120.873001 216.355 179.26401 185.284 236.30801 182.31198 c
292.62402 179.37798 326.57001 204.92297 313.005 239.59299 c
311.573 243.12199 l
306.509 253.96199 306.20401 254.61099 302.21201 261.108 c
303.80002 258.58499 305.14999 256.02701 306.24701 253.442 c
319.82901 221.401 288.931 197.60901 237.229 200.30301 c
185.53101 202.99802 132.608002 231.15701 119.024002 263.20001 c
110.783997 282.642 118.918999 299.047 138.141006 308.33899 c
f
203.519 320.48999 m
237.368 318.72598 272.01401 300.289 280.909 279.31097 c
289.80399 258.33197 269.573 242.75797 235.72501 244.52197 c
201.87601 246.28598 167.227997 264.72296 158.334015 285.70099 c
149.440994 306.67899 169.67101 322.255 203.519 320.48999 c
202.536 320.74698 201.54599 320.901 200.552 320.953 c
192.23199 321.17999 191.90601 321.19 187.284 320.96301 c
185.06799 320.78702 182.108 320.60501 179.899 320.36902 c
149.257004 317.04602 132.738998 299.96201 142.009003 278.09601 c
152.923004 252.35301 195.438 229.729 236.974 227.56401 c
278.509 225.40001 303.33301 244.51501 292.41901 270.25702 c
288.96402 278.40503 282.341 286.242 273.58902 293.216 c
270.85101 295.28601 267.16101 297.99802 264.33502 299.94299 c
257.54202 304.20599 257.54202 304.20599 253.86603 306.168 c
247.20003 309.53 247.20003 309.53 243.74902 310.996 c
237.24503 313.599 237.24503 313.599 233.70802 314.771 c
230.38602 315.78699 224.20403 317.67401 223.43303 317.67401 c
216.44003 319.17801 216.16603 319.23602 212.54303 319.76401 c
204.99004 320.69702 204.69502 320.73502 200.55103 320.953 c
201.54601 320.901 202.535 320.74701 203.519 320.48999 c
f
218.02299 308.125 m
229.271 307.539 240.789 301.41199 243.74399 294.439 c
246.69897 287.466 239.97598 282.29099 228.72598 282.87698 c
217.47598 283.46399 205.95898 289.59097 203.00398 296.564 c
200.049 303.535 206.772 308.71201 218.02299 308.125 c
216.252 310.86499 214.416 313.15601 212.53 315.01199 c
191.92799 316.08701 179.61499 306.60699 185.028 293.83798 c
190.442 281.06897 211.53 269.84698 232.132 268.77298 c
252.73401 267.70099 265.048 277.17999 259.634 289.94897 c
254.222 302.71799 233.132 313.93896 212.53 315.01196 c
214.416 313.15601 216.25301 310.86499 218.02299 308.125 c
f
Q
q
[186.01176 0 0 186.00603 468.75558 5304.894] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
6.98 4.58 m
6.979981 16.139999 l
6.979981 16.5 6.986641 16.9 6.99998 17.34 c
7.01332 17.780001 7.01998 18.00666 7.01998 18.02 c
6.993321 17.98 6.89666 17.76334 6.730001 17.370001 c
6.563341 16.976662 6.400001 16.626661 6.240001 16.320002 c
5.960001 15.780002 l
5.240001 15.780002 l
7.440001 20.000002 l
7.62 20.000002 l
7.62 4.580002 l
6.980001 4.580002 l
6.98 4.58 l
h
1.36 7.94 m
1.63998 8.480001 l
2.35998 8.480001 l
0.13998 4.240001 l
-0.00002 4.240001 l
-0.00002 19.700001 l
0.61998 19.700001 l
0.61998 8.1 l
0.61998 7.76666 0.61332 7.37666 0.59998 6.93 c
0.58664 6.48334 0.57998 6.25334 0.57998 6.24 c
0.59332 6.28 0.68666 6.5 0.86 6.9 c
1.03334 7.3 1.2 7.64666 1.36 7.94 c
1.36 7.94 l
h
17.219999 20 m
19.433399 20 21.32 19.219999 22.879999 17.66 c
23.653339 16.9 24.2367 16.08 24.629999 15.2 c
25.023298 14.32 25.219999 13.32 25.219999 12.2 c
25.219999 9.9734 24.439999 8.0934 22.879999 6.56 c
21.32 5.04 19.393398 4.2734 17.099998 4.26 c
15.686699 4.27334 14.359999 4.62668 13.119999 5.32 c
11.906699 6.02666 10.939999 7.0067 10.219999 8.26 c
10.799999 8.58 l
11.45334 7.42 12.339999 6.52 13.459999 5.88 c
14.566699 5.24 15.779999 4.91334 17.099998 4.9 c
19.233398 4.91334 21.006599 5.62668 22.419998 7.04 c
23.833298 8.4267 24.546598 10.1466 24.559998 12.2 c
24.559998 13.2267 24.379997 14.1433 24.019997 14.95 c
23.659996 15.7567 23.133337 16.5133 22.439997 17.219999 c
21.013296 18.6467 19.273397 19.359999 17.219997 19.359999 c
15.939998 19.359999 14.779997 19.086658 13.739998 18.539999 c
13.439998 19.119999 l
14.573298 19.706659 15.833398 19.999998 17.219997 19.999998 c
17.219999 20 l
h
36.259998 4.24 m
35.34 7.3466 34.606697 9.83 34.059998 11.69 c
33.513298 13.549999 33.013298 15.256599 32.559998 16.809999 c
32.106697 18.3634 31.879997 19.1534 31.879997 19.18 c
32.119999 20 l
32.279999 20 l
37.079998 4.24 l
36.259998 4.24 l
h
31.559999 14.68 m
28.699999 4.240001 l
27.82 4.240001 l
31.16 16.52 l
31.559999 14.68 l
h
45.02 6.14 m
45.02 6.22 45.25666 6.98334 45.73 8.43 c
46.203339 9.876661 46.720001 11.46 47.279999 13.18 c
47.839996 14.900001 48.5933 17.173401 49.539997 20 c
50.399998 20 l
45.099998 4.24 l
44.939999 4.24 l
39.68 20 l
40.5 20 l
45.02 6.14 l
h
44.66 15.520001 m
43.939999 15.520001 l
45.139999 20 l
45.860001 20 l
44.66 15.520001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
